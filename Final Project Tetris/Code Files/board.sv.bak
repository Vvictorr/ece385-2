module board(input Clk, Reset,
             input at_bottom, // from block motion
             input block_sel, 
             input choose_I_horiz,  choose_I_vert, // from choose block
             input [9:0] X_Pos, Y_Pos, //from block_motion
				 output [10:0] [21:0] board //to color mapper
             );

// 3 states needed by the board						  
enum logic [1:0] {clear_board, save_board, wait_board} current_state, next_state;

logic [1:0] orientation;
// this is temporary
// this module should get orientation of selected block as input
always_comb begin
	if (choose_I_horiz)  begin
		orientation = 2'd2;
	end
	else if (choose_I_vert) begin
		orientation = 2'd1;
	end
	else begin
		orientation = 2'b0;
	end
end

// 11 blocks on the X axis and 22 blocks on the Y axis 
logic [2:0] board [10:0] [21:0];  //needs to be initialized, need to look up syntax

always_ff @(posedge Clk) begin
	if (Reset) begin
		current_state <= clear_board;
	end
	else if (at_bottom) begin
		current_state <= save_board;
	end

    else begin
        current_state <= wait_board;
    end
end

always_comb begin
	// set default state
	next_state = current_state;
	
	unique case (current_state) 
		clear_board :
		begin
			if (at_bottom == 1'b1) begin
				next_state = save_board;
			end
            else begin
                next_state = wait_board;
            end
		end

		save_board :
		begin
			if (Reset == 1'b1) begin
				next_state = clear_board;
			end
            else begin
                next_state = wait_board;
            end
		end

        wait_board :
		begin
			if (Reset == 1'b1) begin
				next_state = clear_board;
			end
            else if (at_bottom == 1'b1) begin
                next_state = save_board;
            end
            else begin
                next_state = wait_board;
            end
		end	
	endcase

	case (current_state)
		clear_board :
			for (integer i = 0; i < 11; i = i + 1) begin
				for (integer j = 0; j < 22; j = j + 1) begin
					board[i][j] = 3'd0;
				end
			end

		save_board :	
			if (block_sel == 3'd0) begin //O block is chosen
				// paint all necessary squares as yellow
				board[X_Pos/9][Y_Pos/9] = 3'd2;
				board[X_Pos/9][(Y_Pos/9)+1] = 3'd2;
				board[X_Pos/9+1][(Y_Pos/9)] = 3'd2;
				board[X_Pos/9+1][(Y_Pos/9)+1] = 3'd2;
			end
			else if (block_sel == 3'd1) begin //I block is chosen
				// paint all necessary squares as cyan
				if (orientation == 2'd2) begin// I block is vert
					board[X_Pos/9][Y_Pos/9] = 3'd1;
					board[X_Pos/9][(Y_Pos/9)+1] = 3'd1;
					board[X_Pos/9][(Y_Pos/9)+2] = 3'd1;
					board[X_Pos/9][(Y_Pos/9)+3] = 3'd1;
				end
				else if (orientation == 2'd1) begin// I block is horiz
					board[X_Pos/9][Y_Pos/9] = 3'd1;
					board[(X_Pos/9)+1][Y_Pos/9] = 3'd1;
					board[(X_Pos/9)+2][Y_Pos/9] = 3'd1;
					board[(X_Pos/9)+3][Y_Pos/9] = 3'd1;
				end
			end

 		wait_board:
			//empty?
		default :
			//empty?
	endcase
end
endmodule