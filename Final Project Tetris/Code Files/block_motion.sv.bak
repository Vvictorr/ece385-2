module block_motion(input Clk, Reset, frame_clk,
                    input [9:0] DrawX, DrawY,       // Current pixel coordinates
						  input [7:0] keycode,
						  input keypress,
						 );

logic 
 
    parameter [9:0] block_X_Center = 10'd320;  // Center position on the X axis
    parameter [9:0] block_Y_Center = 10'd240;  // Center position on the Y axis
    parameter [9:0] block_X_Min = 10'd270;       // Leftmost point on the X axis
    parameter [9:0] block_X_Max = 10'd370;     // Rightmost point on the X axis
    parameter [9:0] block_Y_Min = 10'd0;       // Topmost point on the Y axis
    parameter [9:0] block_Y_Max = 10'd479;     // Bottommost point on the Y axis
    parameter [9:0] block_X_Step = 10'd10;      // Step size on the X axis
    parameter [9:0] block_Y_Step = 10'd10;      // Step size on the Y axis
    parameter [9:0] Ball_Size = 10'd4;        // Ball size
    
    logic [9:0] Ball_X_Pos, Ball_X_Motion, Ball_Y_Pos, Ball_Y_Motion;
    logic [9:0] Ball_X_Pos_in, Ball_X_Motion_in, Ball_Y_Pos_in, Ball_Y_Motion_in;
    
    //////// Do not modify the always_ff blocks. ////////
    // Detect rising edge of frame_clk
    logic frame_clk_delayed, frame_clk_rising_edge;
    always_ff @ (posedge Clk) begin
        frame_clk_delayed <= frame_clk;
        frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
    end
    // Update registers
    always_ff @ (posedge Clk)
    begin
        if (Reset)
        begin
            Ball_X_Pos <= block_X_Center;
            Ball_Y_Pos <= block_Y_Center;
            Ball_X_Motion <= 10'd0;
            Ball_Y_Motion <= 10'd0;
        end
        else
        begin
            Ball_X_Pos <= Ball_X_Pos_in;
            Ball_Y_Pos <= Ball_Y_Pos_in;
            Ball_X_Motion <= Ball_X_Motion_in;
            Ball_Y_Motion <= Ball_Y_Motion_in;
        end
    end
    //////// Do not modify the always_ff blocks. ////////
    
	 //curr_states are Y/X_postion and Y/X_motion;
	 //next_states are Y/X_position_in and Y/X_motion_in
    always_comb
    begin
        // By default, keep motion and position unchanged
        Ball_X_Pos_in = Ball_X_Pos;
        Ball_Y_Pos_in = Ball_Y_Pos;
        Ball_X_Motion_in = Ball_X_Motion;
        Ball_Y_Motion_in = Ball_Y_Motion;
        
        // Update position and motion only at rising edge of frame clock
        if (frame_clk_rising_edge)
        begin
				// CHECK FOR KEYPRESS;
				if (keypress == 1'b1) begin
					unique case (keycode)
						8'h1D : //UP
						begin
							block_X_Motion_in = 10'd0;	//clear perpendicular motion in upon keystroke
							block_Y_Motion_in = (~(Ball_Y_Step) + 1'b1);  // 2's complement.
						end
					
						8'h1B : //DOWN
						begin
							Ball_X_Motion_in = 10'd0;	//clear perpendicular motion in upon keystroke
							Ball_Y_Motion_in = Ball_Y_Step;
						end
					
						8'h1C : //LEFT
						begin
							Ball_Y_Motion_in = 10'd0;	//clear perpendicular motion in upon keystroke
							Ball_X_Motion_in = (~(Ball_X_Step) + 1'b1);  // 2's complement.  
						end
					
						8'h23 : //RIGHT
						begin
							Ball_Y_Motion_in = 10'd0;	//clear perpendicular motion in upon keystroke
							Ball_X_Motion_in = Ball_X_Step;
						end
						
						default : //default case
						begin
						end
					endcase
				 end
				
				 
				//CHECK BOUNDARY AND BOUNCE ACCORDINGLY
				if( Ball_Y_Pos + Ball_Size >= Ball_Y_Max ) begin // Ball is at the bottom edge, BOUNCE!
					Ball_Y_Motion_in = (~(Ball_Y_Step) + 1'b1);  // 2's complement.
					Ball_X_Motion_in = 10'd0;	//clear motion in perpendicular motion when bouncing 
				end
				else if ( Ball_Y_Pos <= Ball_Y_Min + Ball_Size ) begin // Ball is at the top edge, BOUNCE!
					Ball_Y_Motion_in = Ball_Y_Step;
					Ball_X_Motion_in = 10'd0;	//clear motion in perpendicular motion when bouncing
				end
				else if( Ball_X_Pos + Ball_Size >= Ball_X_Max ) begin // Ball is at the right edge, BOUNCE!
					Ball_X_Motion_in = (~(Ball_X_Step) + 1'b1);  // 2's complement.  
					Ball_Y_Motion_in = 10'd0;	//clear motion in perpendicular motion when bouncing
				end	
				else if ( Ball_X_Pos <= Ball_X_Min + Ball_Size ) begin // Ball is at the left edge, BOUNCE!
					Ball_X_Motion_in = Ball_X_Step;
					Ball_Y_Motion_in = 10'd0;	//clear motion in perpendicular motion when bouncing
				end
					
            				
            // Update the ball's position with its motion
            Ball_X_Pos_in = Ball_X_Pos + Ball_X_Motion;
            Ball_Y_Pos_in = Ball_Y_Pos + Ball_Y_Motion;
       end
    end
endmodule
